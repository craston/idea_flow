from enum import Enum
from pydantic import BaseModel, Field
from typing import Optional, List
from datetime import datetime

from pydantic.dataclasses import dataclass


class LLMModel(str, Enum):
    gemma2_9b = "gemma2:9b-instruct-q6_K"


class Basic(BaseModel):
    Answer: str = Field(description="The answer to the question.")


class BrainstormingInput(BaseModel):
    topic: str = Field(description="The main topic or question for brainstorming.")
    context: Optional[str] = Field(
        default=None, description="Additional context or details about the topic."
    )
    goals: Optional[List[str]] = Field(
        default=None, description="Specific objectives or outcomes desired."
    )
    preferences: Optional[List[str]] = Field(
        default=None,
        description="User preferences or constraints (e.g., 'budget-friendly', 'adventurous').",
    )
    tags: Optional[List[str]] = Field(
        default=None, description="Keywords to guide the brainstorming process."
    )
    idea_count: Optional[int] = Field(
        default=5, description="Number of ideas to generate (default is 5)."
    )


class IdeaDetail(BaseModel):
    Title: str = Field(description="A concise title for the idea.")
    description: Optional[str] = Field(
        None, description="A detailed explanation of the idea."
    )
    highlights: Optional[List[str]] = Field(
        None, description="Key features or benefits of the idea."
    )
    activities: Optional[List[str]] = Field(
        None, description="Specific activities or tasks involved in the idea."
    )
    tips: Optional[List[str]] = Field(
        None, description="Useful tips or suggestions for implementing the idea."
    )


class BrainstormingOutput(BaseModel):
    topic: str = Field(description="The main topic of brainstorming.")
    generated_ideas: List[IdeaDetail] = Field(
        description="A list of detailed ideas generated by the LLM."
    )


class BrainstormingExamplesOutput(BaseModel):
    examples: list[str] = Field(description="List of examples related to the question.")


class ChatMessages(BaseModel):
    content: str = Field(description="The content of the chat message.")
    isUserMessage: bool = Field(
        decriptopn="Indicates if the message is from the user (True) or the model (False)."
    )
    timestamp: datetime = Field(description="The timestamp of the message.")


class ChatHistory(BaseModel):
    chat_messages: List[ChatMessages] = Field(description="List of chat messages.")


class RiddleOutput(BaseModel):
    riddle: str = Field(description="The generated riddle.")
    answer: str = Field(description="The correct answer to the riddle.")


class RiddleCheckAnswerInput(BaseModel):
    riddle: str = Field(description="The riddle provided to the user.")
    reference_answer: str = Field(description="The correct answer to the riddle.")
    user_answer: str = Field(description="The user's answer to the riddle.")


class RiddleCheckAnswerOutput(BaseModel):
    feedback: str = Field(description="Feedback provided based on the user's answer.")


class RiddleAnswerInput(BaseModel):
    riddle: str = Field(description="The riddle provided to the user.")
    reference_answer: str = Field(description="The correct answer to the riddle.")


class RiddleAnswerOutput(BaseModel):
    answer: str = Field(description="The correct answer to the riddle.")
    explanation: str = Field(description="Explanation of why the answer is correct.")
